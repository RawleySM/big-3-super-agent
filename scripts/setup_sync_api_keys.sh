#!/usr/bin/env bash
#
# Sync API keys and shared configuration into .env files for the
# Windows and WSL components. The script inspects both the Windows user
# environment variables (via PowerShell) and ~/.bashrc exports and
# writes consolidated .env files for each environment.
#
set -euo pipefail

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
REPO_ROOT=$(cd "${SCRIPT_DIR}/.." && pwd)

WINDOWS_TARGET_ROOT=${WINDOWS_TARGET_ROOT:-/mnt/c/users/rstanhope}
WINDOWS_TARGET_DIR=${WINDOWS_TARGET_DIR:-"${WINDOWS_TARGET_ROOT}/big-3-super-agent-windows"}
WINDOWS_ENV_FILE=${WINDOWS_ENV_FILE:-"${WINDOWS_TARGET_DIR}/.env.windows"}
WSL_ENV_FILE=${WSL_ENV_FILE:-"${REPO_ROOT}/apps/realtime-poc/.env"}

NEEDED_KEYS=(
  OPENAI_API_KEY
  GEMINI_API_KEY
  CLAUDE_AGENT_MODEL
  REALTIME_MODEL
  REALTIME_AGENT_VOICE
  BROWSER_TOOL_STARTING_URL
  ENGINEER_NAME
  REALTIME_ORCH_AGENT_NAME
  WSL_TOOL_BRIDGE_CMD
  WSL_TOOL_BRIDGE_TIMEOUT
  WSL_TOOL_BRIDGE_SCRIPT
)

read_windows_env() {
  local key=$1
  if ! command -v powershell.exe >/dev/null 2>&1; then
    return 0
  fi
  powershell.exe -NoProfile -Command "[Environment]::GetEnvironmentVariable('${key}','User')" 2>/dev/null | tr -d '\r'
}

read_bashrc_env() {
  local key=$1
  if [[ ! -f "${HOME}/.bashrc" ]]; then
    return 0
  fi
  # shellcheck disable=SC2086
  grep -E "^[[:space:]]*export[[:space:]]+${key}=" "${HOME}/.bashrc" | tail -n 1 | sed -E "s/^[[:space:]]*export[[:space:]]+${key}=//"
}

write_env_file() {
  local file=$1
  shift
  local -n ref=$1
  local header="# Generated by scripts/setup_sync_api_keys.sh on $(date --iso-8601=seconds)"
  {
    echo "${header}"
    for key in "${NEEDED_KEYS[@]}"; do
      value=${ref["${key}"]-}
      [[ -n "${value}" ]] && printf '%s=%s\n' "${key}" "${value}"
    done
  } >"${file}"
  chmod 0600 "${file}" 2>/dev/null || true
  echo "Wrote ${file}"
}

# Collect values with priority: explicit env var -> Windows user env -> ~/.bashrc -> existing .env

declare -A values=()

for key in "${NEEDED_KEYS[@]}"; do
  if [[ -n "${!key-}" ]]; then
    values["${key}"]="${!key}"
    continue
  fi

  win_val=$(read_windows_env "${key}")
  if [[ -n "${win_val}" ]]; then
    values["${key}"]="${win_val}"
    continue
  fi

  bashrc_val=$(read_bashrc_env "${key}")
  if [[ -n "${bashrc_val}" ]]; then
    values["${key}"]="${bashrc_val}"
    continue
  fi

done

if [[ -z "${values[WSL_TOOL_BRIDGE_SCRIPT]-}" ]]; then
  values[WSL_TOOL_BRIDGE_SCRIPT]="${REPO_ROOT}/apps/realtime-poc/big_3_WSL.py"
fi

if [[ ! -d "${WINDOWS_TARGET_DIR}" ]]; then
  echo "[setup_sync_api_keys] Windows target directory not found: ${WINDOWS_TARGET_DIR}" >&2
  exit 1
fi

write_env_file "${WINDOWS_ENV_FILE}" values
write_env_file "${WSL_ENV_FILE}" values

echo "Environment synchronization complete."
